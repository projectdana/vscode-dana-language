{
	"scopeName": "source.dn",
	"fileTypes": [
	  "dn"
	],
	"firstLineMatch": "(?i)-\\*-[^*]*(Mode:\\s*)?C(\\s*;.*?)?\\s*-\\*-",
	"name": "Dana",
	"patterns": [
	  {
		"include": "#comments"
	  },
	  {
		"match": "\\b(break|else|for|if|return|while)\\b",
		"name": "keyword.control.dana"
	  },
	  {
		"include": "#storage_types"
	  },
	  {
		"match": "\\b(const|static|transfer|store|native|opt)\\b",
		"name": "storage.modifier.dana"
	  },
	  {
		"match": "\\bg[A-Z]\\w*\\b",
		"name": "variable.other.readwrite.global.mac-classic.dana"
	  },
	  {
		"match": "\\bs[A-Z]\\w*\\b",
		"name": "variable.other.readwrite.static.mac-classic.dana"
	  },
	  {
		"match": "\\b(null|true|false|this)\\b",
		"name": "constant.language.dana"
	  },
	  {
		"match": "\\bnew\\b(?!])",
		"name": "keyword.instancing.dana"
	  },
	  {
		"match": "\\b(component|provides|requires|implementation)\\b",
		"name": "keyword.component.dana"
	  },
	  {
		"match": "\\b(data|interface|extends)\\b",
		"name": "keyword.types.dana"
	  },
	  {
		"match": "\\b(uses)\\b",
		"name": "keyword.uses.dana"
	  },
	  {
		"match": "\\b(throw)\\b",
		"name": "keyword.exceptions.dana"
	  },
	  {
		"match": "\\b(clone|rclone|delink|from)\\b",
		"name": "keyword.instancing.dana"
	  },
	  {
		"match": "\\b(super)\\b",
		"name": "keyword.super.dana"
	  },
	  {
		"match": "\\b(hastype|implements|typeof|isset)\\b",
		"name": "keyword.reflect.dana"
	  },
	  {
		"match": "\\b(eventsink|event|sinkevent|stopevent|emitevent)\\b",
		"name": "keyword.events.dana"
	  },
	  {
		"match": "\\b(asynch::?!])\\b",
		"name": "keyword.threads.dana"
	  },
	  {
		"include": "#operators"
	  },
	  {
		"include": "#numbers"
	  },
	  {
		"include": "#strings"
	  },
	  {
		"include": "#block"
	  },
	  {
		"include": "#parens"
	  },
	  {
		"begin": "(?x)\n(?!(?:while|for|do|if|else|return|bool|char|int|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
		"end": "(?<=\\))(?!\\w)",
		"name": "meta.function.dana",
		"patterns": [
		  {
			"include": "#function-innards"
		  }
		]
	  },
	  {
		"include": "#line_continuation_character"
	  },
	  {
		"match": "(\\[)|(\\])",
		"captures": {
		  "1": {
			"name": "punctuation.definition.begin.bracket.square.c"
		  },
		  "2": {
			"name": "punctuation.definition.end.bracket.square.c"
		  }
		}
	  },
	  {
		"match": ";",
		"name": "punctuation.terminator.statement.c"
	  },
	  {
		"match": ",",
		"name": "punctuation.separator.delimiter.c"
	  }
	],
	"repository": {
	  "access": {
		"captures": {
		  "2": {
			"name": "punctuation.separator.dot-access.c"
		  },
		  "3": {
			"name": "punctuation.separator.pointer-access.c"
		  },
		  "4": {
			"name": "variable.other.member.c"
		  }
		},
		"match": "((\\.)|(->))\\s*(([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\())?"
	  },
	  "block": {
		"patterns": [
		  {
			"begin": "{",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.section.block.begin.bracket.curly.c"
			  }
			},
			"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.block.end.bracket.curly.c"
			  }
			},
			"name": "meta.block.c",
			"patterns": [
			  {
				"include": "#block_innards"
			  }
			]
		  }
		]
	  },
	  "block_innards": {
		"patterns": [
		  {
			"include": "#preprocessor-rule-enabled-block"
		  },
		  {
			"include": "#preprocessor-rule-disabled-block"
		  },
		  {
			"include": "#preprocessor-rule-conditional-block"
		  },
		  {
			"include": "#access"
		  },
		  {
			"include": "#c_function_call"
		  },
		  {
			"captures": {
			  "1": {
				"name": "variable.other.c"
			  },
			  "2": {
				"name": "punctuation.definition.parameters.c"
			  }
			},
			"match": "(?x)\n(?:\n  (?:\n    (?=\\s)(?<!else|new|return)\n    (?<=\\w) \\s+  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
			"name": "meta.initialization.c"
		  },
		  {
			"begin": "{",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.section.block.begin.bracket.curly.c"
			  }
			},
			"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.block.end.bracket.curly.c"
			  }
			},
			"patterns": [
			  {
				"include": "#block_innards"
			  }
			]
		  },
		  {
			"include": "#parens-block"
		  },
		  {
			"include": "$base"
		  }
		]
	  },
	  "c_function_call": {
		"begin": "(?x)\n(?!(?:while|for|do|if|else|return|[cr]?iterate)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
		"end": "(?<=\\))(?!\\w)",
		"name": "meta.function-call.c",
		"patterns": [
		  {
			"include": "#function-call-innards"
		  }
		]
	  },
	  "comments": {
		"patterns": [
		  {
			"captures": {
			  "1": {
				"name": "meta.toc-list.banner.block.c"
			  }
			},
			"match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
			"name": "comment.block.c"
		  },
		  {
			"begin": "/\\*",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.definition.comment.begin.c"
			  }
			},
			"end": "\\*/",
			"endCaptures": {
			  "0": {
				"name": "punctuation.definition.comment.end.c"
			  }
			},
			"name": "comment.block.c"
		  },
		  {
			"match": "\\*/.*\\n",
			"name": "invalid.illegal.stray-comment-end.c"
		  },
		  {
			"captures": {
			  "1": {
				"name": "meta.toc-list.banner.line.c"
			  }
			},
			"match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
			"name": "comment.line.banner.cpp"
		  },
		  {
			"begin": "(^[ \\t]+)?(?=//)",
			"beginCaptures": {
			  "1": {
				"name": "punctuation.whitespace.comment.leading.cpp"
			  }
			},
			"end": "(?!\\G)",
			"patterns": [
			  {
				"begin": "//",
				"beginCaptures": {
				  "0": {
					"name": "punctuation.definition.comment.cpp"
				  }
				},
				"end": "(?=\\n)",
				"name": "comment.line.double-slash.cpp",
				"patterns": [
				  {
					"include": "#line_continuation_character"
				  }
				]
			  }
			]
		  }
		]
	  },
	  "line_continuation_character": {
		"patterns": [
		  {
			"match": "(\\\\)\\n",
			"captures": {
			  "1": {
				"name": "constant.character.escape.line-continuation.c"
			  }
			}
		  }
		]
	  },
	  "numbers": {
		"patterns": [
		  {
			"match": "\\b((0(x|X)[0-9a-fA-F]([0-9a-fA-F']*[0-9a-fA-F])?)|(0(b|B)[01]([01']*[01])?)|(([0-9]([0-9']*[0-9])?\\.?[0-9]*([0-9']*[0-9])?)|(\\.[0-9]([0-9']*[0-9])?))((e|E)(\\+|-)?[0-9]([0-9']*[0-9])?)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
			"name": "constant.numeric.c"
		  }
		]
	  },
	  "parens": {
		"begin": "\\(",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.section.parens.begin.bracket.round.c"
		  }
		},
		"end": "\\)",
		"endCaptures": {
		  "0": {
			"name": "punctuation.section.parens.end.bracket.round.c"
		  }
		},
		"patterns": [
		  {
			"include": "$base"
		  }
		]
	  },
	  "parens-block": {
		"begin": "\\(",
		"beginCaptures": {
		  "0": {
			"name": "punctuation.section.parens.begin.bracket.round.c"
		  }
		},
		"end": "\\)",
		"endCaptures": {
		  "0": {
			"name": "punctuation.section.parens.end.bracket.round.c"
		  }
		},
		"patterns": [
		  {
			"include": "#block_innards"
		  }
		]
	  },
	  "operators": {
		"patterns": [
		  {
			"match": "(?<![\\w$])(sizeof)(?![\\w$])",
			"name": "keyword.operator.sizeof.c"
		  },
		  {
			"match": "--",
			"name": "keyword.operator.decrement.c"
		  },
		  {
			"match": "\\+\\+",
			"name": "keyword.operator.increment.c"
		  },
		  {
			"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
			"name": "keyword.operator.assignment.compound.c"
		  },
		  {
			"match": "&=|\\^=|<<=|>>=|\\|=",
			"name": "keyword.operator.assignment.compound.bitwise.c"
		  },
		  {
			"match": "<<|>>",
			"name": "keyword.operator.bitwise.shift.c"
		  },
		  {
			"match": "!=|<=|>=|==|<|>",
			"name": "keyword.operator.comparison.c"
		  },
		  {
			"match": "&&|!|\\|\\|",
			"name": "keyword.operator.logical.c"
		  },
		  {
			"match": "&|\\||\\^|~",
			"name": "keyword.operator.c"
		  },
		  {
			"match": "=",
			"name": "keyword.operator.assignment.c"
		  },
		  {
			"match": "%|\\*|/|-|\\+",
			"name": "keyword.operator.c"
		  },
		  {
			"begin": "\\?",
			"beginCaptures": {
			  "0": {
				"name": "keyword.operator.ternary.c"
			  }
			},
			"end": ":",
			"applyEndPatternLast": true,
			"endCaptures": {
			  "0": {
				"name": "keyword.operator.ternary.c"
			  }
			},
			"patterns": [
			  {
				"include": "#access"
			  },
			  {
				"include": "#libc"
			  },
			  {
				"include": "#c_function_call"
			  },
			  {
				"include": "$base"
			  }
			]
		  }
		]
	  },
	  "strings": {
		"patterns": [
		  {
			"begin": "\"",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.definition.string.begin.c"
			  }
			},
			"end": "\"",
			"endCaptures": {
			  "0": {
				"name": "punctuation.definition.string.end.c"
			  }
			},
			"name": "string.quoted.double.c",
			"patterns": [
			  {
				"include": "#string_escaped_char"
			  },
			  {
				"include": "#string_placeholder"
			  },
			  {
				"include": "#line_continuation_character"
			  }
			]
		  },
		  {
			"begin": "'",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.definition.string.begin.c"
			  }
			},
			"end": "'",
			"endCaptures": {
			  "0": {
				"name": "punctuation.definition.string.end.c"
			  }
			},
			"name": "string.quoted.single.c",
			"patterns": [
			  {
				"include": "#string_escaped_char"
			  },
			  {
				"include": "#line_continuation_character"
			  }
			]
		  }
		]
	  },
	  "string_escaped_char": {
		"patterns": [
		  {
			"match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
			"name": "constant.character.escape.c"
		  },
		  {
			"match": "\\\\.",
			"name": "invalid.illegal.unknown-escape.c"
		  }
		]
	  },
	  "string_placeholder": {
		"patterns": [
		  {
			"match": "(?x) %\n(\\d+\\$)?                           # field (argument #)\n[#0\\- +']*                          # flags\n[,;:_]?                              # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?          # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?    # precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]           # conversion type",
			"name": "constant.other.placeholder.c"
		  },
		  {
			"match": "(%)(?!\"\\s*(PRI|SCN))",
			"captures": {
			  "1": {
				"name": "invalid.illegal.placeholder.c"
			  }
			}
		  }
		]
	  },
	  "storage_types": {
		"patterns": [
		  {
			"match": "\\b(void|bool|byte|char|int|dec)\\b",
			"name": "storage.type.c"
		  }
		]
	  },
	  "function-innards": {
		"patterns": [
		  {
			"include": "#comments"
		  },
		  {
			"include": "#storage_types"
		  },
		  {
			"include": "#operators"
		  },
		  {
			"include": "#vararg_ellipses"
		  },
		  {
			"begin": "(?x)\n(?!(?:while|for|if|else|return|[cr]?iterate)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
			"beginCaptures": {
			  "1": {
				"name": "entity.name.function.c"
			  },
			  "2": {
				"name": "punctuation.section.parameters.begin.bracket.round.c"
			  }
			},
			"end": "\\)",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.parameters.end.bracket.round.c"
			  }
			},
			"patterns": [
			  {
				"include": "#function-innards"
			  }
			]
		  },
		  {
			"begin": "\\(",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.section.parens.begin.bracket.round.c"
			  }
			},
			"end": "\\)",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.parens.end.bracket.round.c"
			  }
			},
			"patterns": [
			  {
				"include": "#function-innards"
			  }
			]
		  },
		  {
			"include": "$base"
		  }
		]
	  },
	  "function-call-innards": {
		"patterns": [
		  {
			"include": "#comments"
		  },
		  {
			"include": "#storage_types"
		  },
		  {
			"include": "#access"
		  },
		  {
			"include": "#operators"
		  },
		  {
			"begin": "(?x)\n(?!(?:while|for|do|if|else|return|[cr]?iterate)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
			"beginCaptures": {
			  "1": {
				"name": "entity.name.function.c"
			  },
			  "2": {
				"name": "punctuation.section.arguments.begin.bracket.round.c"
			  }
			},
			"end": "\\)",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.arguments.end.bracket.round.c"
			  }
			},
			"patterns": [
			  {
				"include": "#function-call-innards"
			  }
			]
		  },
		  {
			"begin": "\\(",
			"beginCaptures": {
			  "0": {
				"name": "punctuation.section.parens.begin.bracket.round.c"
			  }
			},
			"end": "\\)",
			"endCaptures": {
			  "0": {
				"name": "punctuation.section.parens.end.bracket.round.c"
			  }
			},
			"patterns": [
			  {
				"include": "#function-call-innards"
			  }
			]
		  },
		  {
			"include": "#block_innards"
		  }
		]
	  }
	}
  }
